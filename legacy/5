import { type Collection, EmbedsBuilder } from '@discordeno';
import { BotManager } from '../../../bot.ts';
import { Constants } from '../../../struct/constants.ts';
import { InteractionHelper } from '../../../util/helper/interaction.ts';
import { KvHelper } from '../../../util/helper/kv.ts';
import { PermissionHelper } from '../../../util/helper/permission.ts';
import { Initializable } from '../../../util/structure/initializable.ts';

export class ReactionInteractionComponentHandler extends Initializable {
  public override initialize(): Promise<void> | void {
    // Handle Components for Reactions
    BotManager.event.add('interactionCreate', async (interaction) => {
      if (interaction.data?.customId === undefined) return;
      const unwrappedKey = KvHelper.unwrap(interaction.data.customId, interaction.user.id.toString());
      if (unwrappedKey === null) return;
      await interaction.deferEdit();

      // Check Permissions
      const member = await BotManager.bot.cache.members.get(interaction.user.id, interaction.member?.guildId!);
      if (!await PermissionHelper.checkRolesForPermission(member!, member!.roles, ['MANAGE_MESSAGES'])) {
        return InteractionHelper.unauthorized(interaction);
      }

      const resolved = interaction.data!.resolved! as {
        roles: Collection<bigint, typeof BotManager.bot.transformers.$inferredTypes.role>;
        members: Collection<bigint, typeof BotManager.bot.transformers.$inferredTypes.member>;
      };
      const roles = resolved?.roles?.map((v) => v.id.toString()) ?? [];
      const members = resolved?.members?.map((v) => v.id.toString()) ?? [];
      await Constants.conf!.set(unwrappedKey, {
        roles,
        members,
      });

      await interaction.edit({
        embeds: new EmbedsBuilder()
          .setTitle('Confirmation')
          .setDescription(`Exclusions have been updated for the specified channel.`)
          .addField('Roles', roles.length === 0 ? 'None' : roles.map((v) => `<@&${v}>`).join(' '))
          .addField('Users', members.length === 0 ? 'None' : members.map((v) => `<@${v}>`).join(' '))
          .setColor('#5a5a5a'),
        components: [],
      });
    });
  }
}
