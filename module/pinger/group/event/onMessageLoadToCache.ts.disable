import { AsyncInitializable } from '../../../../lib/generic/initializable.ts';
import { KVC } from '../../../../lib/kvc/kvc.ts';
import { Bootstrap } from '../../../../mod.ts';

export default class extends AsyncInitializable {
  public override async initialize(): Promise<void> {
    Bootstrap.event.add('messageCreate', async (message) => {
      if (message.guildId === undefined) return;

      // Parse and Rebuild Message
      const text: string[] = [];

      if (message.content !== undefined) text.push(message.content.toLowerCase());
      for (const embed of message.embeds ?? []) {
        if (embed.title !== undefined) text.push(embed.title.toLowerCase());
        if (embed.description !== undefined) text.push(embed.description.toLowerCase());
        for (const field of embed.fields ?? []) {
          text.push(field.value.toLowerCase());
        }
      }

      if (message.messageReference !== undefined) {
        const followFetch = await Bootstrap.bot.helpers.getMessage(message.messageReference.channelId!, message.messageReference.messageId!).catch(() => null);
        if (followFetch !== null) {
          if (followFetch.content !== undefined) text.push(followFetch.content.toLowerCase());
          for (const embed of followFetch.embeds ?? []) {
            if (embed.title !== undefined) text.push(embed.title.toLowerCase());
            if (embed.description !== undefined) text.push(embed.description.toLowerCase());
            for (const field of embed.fields ?? []) {
              text.push(field.value.toLowerCase());
            }
          }
        }
      }

      // Write to database.
      await KVC.persistd.tds.add({
        guildId: message.guildId.toString(),
        messageId: message.id.toString(),
        text,
      }, {
        expireIn: 30000,
      });
    });
  }
}

/*
import { KVC } from './lib/kvc/kvc.ts';

const license = 'test';

Deno.serve({
  port: 38120,
  // deno-lint-ignore require-await
  async handler(request): Promise<Response> {
    if (request.headers.get('upgrade') !== 'websocket') {
      return new Response('Expected Upgrade Header');
    }

    const { socket, response } = makeSocket(request);

    socket;
    socket.onopen = () => {
      console.log('CONNECTED');
    };
    socket.onmessage = async (event) => {
      if (!socket.authenticated && typeof event.data === 'string' && event.data.startsWith('Authenticate')) {
        if (event.data.includes(license)) {
          socket.authenticated = true;
        }
      }
      if (!socket.authenticated) {
        socket.send('Authentication Required.');
        return;
      }

      if (typeof event.data === 'string' && event.data === 'Fetch') {
        const fetch = await KVC.persistd.tds.getMany();
        socket.send(JSON.stringify(fetch, null, 2));
      }
    };
    socket.onclose = () => console.log('DISCONNECTED');
    socket.onerror = (error) => console.error('ERROR:', error);

    return response;
  },
});

function makeSocket(request: Request): {
  socket: WebSocket & {
    authenticated?: boolean;
  };
  response: Response;
} {
  return Deno.upgradeWebSocket(request);
}
*/
